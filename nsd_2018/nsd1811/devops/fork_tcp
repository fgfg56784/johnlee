利用fork创建TCP服务器
3.1 问题

创建tcp_time_server.py文件，编写TCP服务器：
服务器监听在0.0.0.0的21567端口上
收到客户端数据后，将其加上时间戳后回送给客户端
如果客户端发过来的字符全是空白字符，则终止与客户端的连接
服务器能够同时处理多个客户端的请求
程序通过forking来实现
3.2 方案

面向对象编程方法编写TCP服务器：
1）TcpTimeServer():创建TcpTimeServer类
2）__init__():创建对象后自动调用init方法，初始化以下属性：
建立socket对象。
设置socket选项，当socket关闭后，本地端用于该socket的端口号立刻就可以被重用。
绑定socket对象IP和端口。
将套接字设为监听模式，准备接收客户端请求。利用listen()函数进行侦听连接。
3）将创建的TcpTimeServer()对象返回给s，让s实例来保存该对象
4）调用s.mainloop()方法：
利用while循环，accept()会等待并返回一个客户端的连接
os.fork生成子进程
然后进行if判断，如果是服务器的话（即父进程），关闭客户端套接字，并利用os.waitpid返回值循环处理客户机僵尸进程，僵尸进程处理完毕，结束循环，父进程重新开始循环，进入accept()连接去等待
如果是客户端的话（即子进程），关闭服务器套接字，并调用chat()方法，去与客户机聊天去。子进程结束后exit()退出。
5)调用chat()方法，用返回的客户端作为参数
循环将recv接收到的数据加上时间戳后send发送给客户端
关闭套接字，释放资源。
6)此时服务器能够同时处理多个客户端的请求，以多进程方式
多进程编程
什么是forking
fork(分岔) 在Linux系统中使用非常广泛

forking工作原理
    Linux系统运行程序或命令时,如果是fork执行,父进程将会产生子进程,程序在子进程中执行,子进程执行完毕后将会销毁,回到父进程
    父进程将自身资源拷贝一份,命令在子进程中运行时,旧具有父进程完全一样的运行环境

为什么要使用fork
提升工作效率

父进程fork出 子进程 并挂起
    子进程运行完毕后,释放大部分资源并通知父进程, 此时,子进程被称为僵尸进程(僵尸进程是正常现象)
    父进程获知子进程结束,子进程所有资源获得释放

僵尸进程
•  僵尸进程没有任何可执行代码,也不能被调度
•  如果系统中存在过多的僵尸进程,将因为没有可用的进程号而导致系统不能产生新的进程
•  对于系统管理员来说,可以试图杀死其父进程或重启系统来消除僵尸进程

第一范式（1NF）
是指在关系模型中，对于添加的一个规范要求，所有的域都应该是原子性的，
即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。
即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个
域值只能是实体的一个属性或一个属性的一部分。简而言之，第一范式就是无重复的域。


第二范式（2NF）
在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）, 简单来说,表需要一个主键

第三范式 (3NF)
在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）,实发工资依赖基本工资好奖金,
它,不应该出现在表中,有需要时,临时计算

